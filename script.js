document.addEventListener('DOMContentLoaded', () => {
    console.log("DOM Carregado. Script completo iniciado.");

    // Elementos da UI
    const initialScreen = document.getElementById('initial-screen');
    const scrollScreen = document.getElementById('scroll-screen');
    const inviteTextWrapper = document.getElementById('invite-text-wrapper');
    const backgroundMusic = document.getElementById('background-music');
    const crestImage = document.getElementById('crest-img');

    console.log("Elemento initialScreen:", initialScreen);
    console.log("Elemento scrollScreen:", scrollScreen);
    console.log("Elemento inviteTextWrapper:", inviteTextWrapper); // Verifique se este √© encontrado
    // ... outros logs de elementos ...

    // Configura√ß√µes
    const scrollOpenDuration = 20000;
    const typingSpeed = 40;
    let autoCloseTimer = null;
    let userHasInteracted = false;
    let audioCanPlay = false;

    // Texto do convite
    const invitationTextLines = [
        "Prezado(a) bruxinho(a),",
        "Um elfo fofoqueiro contou: no dia <strong>19/06</strong>, a bruxinha poderosa <strong>LUNNA</strong> completa mais um ciclo encantado! ‚ú®üßÅ",
        "Pra celebrar, teremos um bolinho que desaparece, docinhos m√°gicos e sorrisos brilhando no escuro! Nada de drag√µes ou aulas de po√ß√µes ‚Äî √© s√≥ um bolinho, mesmo!",
        "üìÖ Data encantada: <strong>19/06 (quinta-feira)</strong>",
        "‚è∞ Hor√°rio do feiti√ßo: <strong>18h</strong> (sem atraso ou vira sapo!)",
        "üìç Local encantado: <strong>No Ref√∫gio Secreto da Lunna</strong>",
        "Esperamos voc√™ pra espalhar magia e dar boas risadas! üéâ"
    ];

    // --- L√≥gica de √Åudio ---
    if (backgroundMusic) {
        console.log("Configurando listeners para o elemento de √°udio.");
        backgroundMusic.load();
        backgroundMusic.addEventListener('canplaythrough', () => {
            console.log("√ÅUDIO: Evento 'canplaythrough' disparado. √Åudio pronto para tocar.");
            audioCanPlay = true;
        });
        backgroundMusic.addEventListener('error', (e) => { /* ...l√≥gica de erro como antes... */ });
    } else {
        console.error("ERRO CR√çTICO: Elemento de √°udio 'background-music' N√ÉO ENCONTRADO.");
    }

    // --- Fun√ß√µes do Convite ---
    function typeWriterEffect(element, text, speed, callback) {
        let i = 0;
        // Verifica se o elemento existe antes de tentar modificar o innerHTML
        if (!element) {
            console.error("TEXTO ERRO: Elemento para typeWriterEffect √© nulo. Texto:", text);
            if (callback) callback(); // Chama o callback para n√£o travar a sequ√™ncia
            return;
        }
        element.innerHTML = ""; // Limpa o conte√∫do anterior
        element.classList.add('typing-cursor');

        function type() {
            if (i < text.length) {
                if (text.charAt(i) === '<') { // Lida com tags HTML
                    let tagEnd = text.indexOf('>', i);
                    if (tagEnd !== -1) {
                        element.innerHTML += text.substring(i, tagEnd + 1);
                        i = tagEnd;
                    }
                } else {
                    element.innerHTML += text.charAt(i);
                }
                i++;
                setTimeout(type, speed);
            } else {
                element.classList.remove('typing-cursor');
                if (callback) callback(); // Chama a pr√≥xima fun√ß√£o se houver
            }
        }
        type();
    }

    function writeAllLines(lines, index = 0) {
        // Verifica se inviteTextWrapper existe
        if (!inviteTextWrapper) {
            console.error("TEXTO ERRO: inviteTextWrapper n√£o encontrado para escrever as linhas.");
            // Se n√£o puder escrever, ainda agenda o fechamento para n√£o ficar aberto indefinidamente
            if (autoCloseTimer) clearTimeout(autoCloseTimer);
            autoCloseTimer = setTimeout(hideScroll, scrollOpenDuration);
            return;
        }

        if (index < lines.length) {
            const lineText = lines[index];
            const p = document.createElement('p');
            inviteTextWrapper.appendChild(p); // Adiciona o par√°grafo ao wrapper
            typeWriterEffect(p, lineText, typingSpeed, () => { // Aplica o efeito ao par√°grafo
                writeAllLines(lines, index + 1); // Chama recursivamente para a pr√≥xima linha
            });
        } else {
            // Todas as linhas foram escritas
            if (autoCloseTimer) clearTimeout(autoCloseTimer);
            console.log("TEXTO: Todas as linhas escritas. Agendando fechamento do pergaminho.");
            autoCloseTimer = setTimeout(hideScroll, scrollOpenDuration);
        }
    }

    function tryPlayMusic() {
        if (backgroundMusic && audioCanPlay && userHasInteracted && backgroundMusic.paused) {
            console.log("√ÅUDIO: Tentando tocar a m√∫sica...");
            backgroundMusic.currentTime = 0;
            const playPromise = backgroundMusic.play();
            if (playPromise !== undefined) {
                playPromise.then(() => {
                    console.log("√ÅUDIO: M√∫sica tocando com sucesso!");
                }).catch(error => {
                    console.error("√ÅUDIO: Erro ao tentar tocar m√∫sica:", error.name, error.message);
                });
            }
        } else {
            // ... (logs de aviso como antes) ...
            let reason = [];
            if (!backgroundMusic) reason.push("elemento de √°udio n√£o encontrado");
            if (!audioCanPlay) reason.push("√°udio n√£o est√° pronto");
            if (!userHasInteracted) reason.push("usu√°rio ainda n√£o interagiu");
            if (backgroundMusic && !backgroundMusic.paused) reason.push("m√∫sica n√£o est√° pausada (ou j√° est√° tocando)");
            console.warn(`√ÅUDIO: N√£o foi poss√≠vel tocar a m√∫sica agora. Raz√£o(√µes): ${reason.join(', ')}.`);
        }
    }

    function showScroll() {
        console.log("CONVITE: Fun√ß√£o showScroll() chamada.");
        if (!initialScreen || !scrollScreen || !crestImage || !inviteTextWrapper) {
            console.error("CONVITE ERRO: Elementos da UI ausentes ao tentar mostrar o pergaminho.");
            return;
        }

        initialScreen.classList.remove('active');
        scrollScreen.classList.add('active');
        crestImage.style.display = 'block';

        // Verifica se inviteTextWrapper existe ANTES de tentar limpar e escrever
        if (inviteTextWrapper) {
            inviteTextWrapper.innerHTML = ''; // Limpa texto anterior
            writeAllLines(invitationTextLines); // Come√ßa a escrever o texto
        } else {
            console.error("TEXTO ERRO: inviteTextWrapper √© nulo em showScroll(). O texto n√£o ser√° exibido.");
        }

        tryPlayMusic();
    }

    function hideScroll() {
        console.log("CONVITE: Fun√ß√£o hideScroll() chamada.");
        if (!initialScreen || !scrollScreen || !crestImage) {
            console.error("CONVITE ERRO: Elementos da UI ausentes ao tentar fechar o pergaminho.");
            return;
        }
        scrollScreen.classList.remove('active');
        crestImage.style.display = 'none';
        initialScreen.classList.add('active');

        if (backgroundMusic && !backgroundMusic.paused) {
            backgroundMusic.pause();
            console.log("√ÅUDIO: M√∫sica pausada.");
        }
        if (autoCloseTimer) clearTimeout(autoCloseTimer);
    }

    // --- Event Listener Principal para Abrir o Convite ---
    if (initialScreen) {
        initialScreen.addEventListener('click', () => {
            console.log("CONVITE: CLIQUE DETECTADO em initialScreen!");
            if (!userHasInteracted) {
                userHasInteracted = true;
                console.log("√ÅUDIO: Primeira intera√ß√£o do usu√°rio registrada (flag userHasInteracted = true).");
            }
            showScroll();
        });
    } else {
        console.error("ERRO CR√çTICO: Elemento 'initial-screen' N√ÉO ENCONTRADO no HTML.");
    }
});
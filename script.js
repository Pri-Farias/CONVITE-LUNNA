document.addEventListener('DOMContentLoaded', () => {
    const telaInicial = document.getElementById('tela-inicial');
    // const cartaFechada = document.getElementById('carta-fechada'); // N√£o usado diretamente em fun√ß√µes
    const instrucaoAbrir = document.getElementById('instrucao-abrir');

    const cartaContainer = document.getElementById('carta-container');
    const cartaAberta = document.getElementById('carta-aberta');
    const textoConviteEl = document.getElementById('texto-convite');
    const musicaFundo = document.getElementById('musica-fundo');
    const corujaAnimacao = document.getElementById('coruja-animacao');
    // --- NOVO TEXTO DO CONVITE ---
    const textoCompleto = `Prezado(a) bruxinho(a),\n\nRecebemos informa√ß√µes ultra-secretas (vazadas por um elfo fofoqueiro) de que no dia 19 de junho, uma bruxinha poderosa chamada Lunna vai completar mais um ciclo encantado! ü™ÑüéÇ\n\nE como manda a tradi√ß√£o da magia... vai ter: bolinho que desaparece, docinho que hipnotiza, sorrisos que brilham no escuro e amigos m√°gicos reunidos pra celebrar!\n\nüìÖ Data encantada: 19/06 (quinta-feira)\n‚è∞ Hor√°rio do feiti√ßo: 18h, sem atraso ou vira sapo!\nüìç Local encantado: No Ref√∫gio Secreto da Lunna. \n\nMas calma, nada de drag√µes, vassouras desgovernadas ou aulas de po√ß√µes! √â s√≥ um bolinho mesmo, daqueles que somem rapidinho quando a gente diz "Aparecium Brigadeirus!" üç∞‚ú®`;
 let timeoutFecharCarta;
    const tempoParaFecharCartaAberta = 15000; // 15 segundos ap√≥s o texto terminar de ser escrito. AJUSTE SE NECESS√ÅRIO.

    function efeitoMaquinaDeEscrever(texto, elemento, callback) {
        let i = 0;
        elemento.innerHTML = ''; // Limpa o conte√∫do anterior
        function escrever() {
            if (i < texto.length) {
                // Para interpretar tags HTML como <strong> no meio do texto
                if (texto.substring(i).startsWith("<strong>")) {
                    let endTagIndex = texto.indexOf("</strong>", i);
                    if (endTagIndex === -1) { // Caso n√£o encontre a tag de fechamento
                        elemento.innerHTML += texto.charAt(i); // Escreve como texto normal
                        i++;
                    } else {
                        elemento.innerHTML += texto.substring(i, endTagIndex + 9);
                        i = endTagIndex + 9;
                    }
                } else {
                    elemento.innerHTML += texto.charAt(i);
                    i++;
                }
                setTimeout(escrever, 35); // Ajuste a velocidade aqui (ms)
            } else if (callback) {
                callback(); // Chama o callback quando o texto termina
            }
        }
        escrever();
    }

    function fecharCartaEMostrarCoruja() {
        console.log("Iniciando fecharCartaEMostrarCoruja..."); // Log para depura√ß√£o

        // Para a m√∫sica com fade out
        if (musicaFundo && !musicaFundo.paused) {
            let volume = musicaFundo.volume;
            const fadeOutInterval = setInterval(() => {
                volume -= 0.1;
                if (volume < 0.1) { // Deixar um m√≠nimo para n√£o estourar
                    volume = 0;
                }
                musicaFundo.volume = volume;
                if (musicaFundo.volume <= 0) {
                    musicaFundo.pause();
                    musicaFundo.currentTime = 0;
                    musicaFundo.volume = 1; // Restaurar volume para a pr√≥xima vez
                    clearInterval(fadeOutInterval);
                    console.log("M√∫sica parada.");
                }
            }, 100);
        } else {
            console.log("M√∫sica n√£o estava tocando ou elemento n√£o encontrado.");
        }

        // Adiciona classe para animar o fechamento da carta aberta
        if (cartaContainer) {
            cartaContainer.classList.add('fechando');
        } else {
            console.error("Elemento #carta-container n√£o encontrado para fechar.");
            return; // Sai da fun√ß√£o se o container n√£o existe
        }
        
        setTimeout(() => {
            console.log("Timeout interno de fecharCartaEMostrarCoruja: Escondendo carta aberta, mostrando inicial e coruja.");
            if (cartaAberta) {
                cartaAberta.style.opacity = '0';
                cartaAberta.style.transform = 'scale(0.8)';
            }
            if (cartaContainer) {
                cartaContainer.classList.remove('visivel');
                cartaContainer.classList.add('escondido');
                cartaContainer.classList.remove('fechando'); // Limpa a classe de anima√ß√£o
            }
            
            if (telaInicial) {
                telaInicial.classList.remove('escondido');
                void telaInicial.offsetWidth; // For√ßar reflow
                telaInicial.style.opacity = '1';
                telaInicial.style.transform = 'scale(1)';
            }
            if (instrucaoAbrir) { // Garantir que a instru√ß√£o de abrir n√£o reapare√ßa
                instrucaoAbrir.classList.add('escondido');
            }

            if (corujaAnimacao) {
                corujaAnimacao.classList.remove('escondido');
                void corujaAnimacao.offsetWidth; // For√ßar reflow
                corujaAnimacao.classList.add('pousar');
                console.log("Coruja animada.");
            } else {
                console.error("Elemento #coruja-animacao n√£o encontrado.");
            }

        }, 700); // Dura√ß√£o da anima√ß√£o de fechar (deve corresponder ao CSS transition)
    }

    function abrirCarta() {
        console.log("Abrindo carta...");
        if (!telaInicial || !instrucaoAbrir || !cartaContainer || !cartaAberta || !musicaFundo || !textoConviteEl) {
            console.error("Um ou mais elementos essenciais n√£o foram encontrados no DOM para abrirCarta.");
            return; // Impede a execu√ß√£o se elementos cruciais faltarem
        }

        telaInicial.style.opacity = '0';
        telaInicial.style.transform = 'scale(0.5)';

        setTimeout(() => {
            telaInicial.classList.add('escondido');
            instrucaoAbrir.classList.add('escondido');

            cartaContainer.classList.remove('escondido');
            // For√ßar reflow para garantir que a transi√ß√£o de entrada do container funcione
            void cartaContainer.offsetWidth; 
            cartaContainer.classList.add('visivel');
            
            // For√ßar reflow para garantir que a transi√ß√£o de entrada da carta aberta funcione
            void cartaAberta.offsetWidth; 
            cartaAberta.style.opacity = '1';
            cartaAberta.style.transform = 'scale(1)';

            musicaFundo.play().catch(error => {
                console.log("Autoplay da m√∫sica foi bloqueado:", error);
                // Opcional: Mostrar um bot√£o "Tocar M√∫sica" se bloqueado
            });

            // O callback aqui agendar√° o fechamento da carta
            efeitoMaquinaDeEscrever(textoCompleto, textoConviteEl, () => {
                console.log("Texto terminou de ser escrito. Agendando fechamento da carta em " + tempoParaFecharCartaAberta + "ms.");
                clearTimeout(timeoutFecharCarta); // Limpa qualquer timeout anterior (seguran√ßa)
                timeoutFecharCarta = setTimeout(fecharCartaEMostrarCoruja, tempoParaFecharCartaAberta);
            });

        }, 500); // Tempo da anima√ß√£o de fade out da carta fechada
    }


    // Event listener para clicar na carta fechada
    if (telaInicial) {
        telaInicial.addEventListener('click', abrirCarta);
    } else {
        console.error("Elemento #tela-inicial n√£o encontrado para adicionar event listener.");
    }

    // Opcional: se o usu√°rio clicar na carta aberta, cancelar o fechamento autom√°tico
    // Isso permite que ele leia por mais tempo se quiser.
    if (cartaAberta) {
        cartaAberta.addEventListener('click', () => {
            if (timeoutFecharCarta) {
                clearTimeout(timeoutFecharCarta);
                console.log("Fechamento autom√°tico da carta CANCELADO pelo clique do usu√°rio.");
                // Voc√™ pode optar por reagendar com um tempo maior aqui se desejar,
                // ou simplesmente deixar que n√£o feche mais automaticamente.
                // Exemplo: timeoutFecharCarta = setTimeout(fecharCartaEMostrarCoruja, tempoParaFecharCartaAberta * 2);
            }
        });
    }
});